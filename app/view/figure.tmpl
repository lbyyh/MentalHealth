<!DOCTYPE html>
<html>
<head>
    <title>数据统计图</title>
    <script src="https://cdn.jsdelivr.net/npm/echarts@latest/dist/echarts.min.js"></script>
    <style>
    #toggle-button {
        margin-top: 25px;
        position: fixed;
        right: 10px;
        top: 10px;
        padding: 10px 20px;
        cursor: pointer;
        font-size: 18px;
        background-color: #009879;  //按钮背景色
        border: none;  //删除默认边框
        color: white; //按钮文字颜色
        text-align: center;
            text-decoration: none;
            border-radius: 12px;  //按钮圆角
        transition: all 0.5s;  //添加过渡效果
        }
        #toggle-button:hover {
            background-color: #45a049;  //鼠标悬停时的背景色
        color: white;
    }
    </style>
</head>
<body>
<div id="main" style="width: 100%;height:100vh;"></div>
<button id="toggle-button">切换至线形图</button>
<script type="text/javascript">
    window.onload = function() {
        var myChart = echarts.init(document.getElementById('main'));
        var isLine = false;

        var roundBar = false;
        var formData = new FormData();
        formData.append('columns', 'Growing_Stress,Changes_Habits,Mental_Health_History,Mood_Swings,Coping_Struggles,Work_Interest,Social_Weakness,mental_health_interview');

        fetch('/user/countColumns', {
            method: 'POST',
            body: formData
        }).then(response => response.json())
            .then(function(data) {
                var option = generateOption(data, 'bar');
                myChart.setOption(option);

                var toggleButton = document.getElementById('toggle-button');

                toggleButton.onclick = function() {
                    isLine = !isLine;
                    toggleButton.innerText = isLine ? '切换至堆叠图' : '切换至线形图';
                    myChart.setOption(generateOption(data, isLine ? 'line' : 'bar'));
                };
            })
            .catch(error => console.error('Error:', error));

        window.onresize = function() {
            myChart.resize();
        };

        function generateOption(data, type) {
            var series = Object.keys(data).map(function (key) {
                return {
                    type: type,
                    data: Object.values(data[key]),
                    name: key,
                    roundCap: roundBar,
                    barWidth: 30,
                    stack: 'total',
                    emphasis: {
                        focus: 'series'
                    },
                    label: {
                        show: true,
                        position: 'inside'
                    }
                };
            });
            var option = {
                title: {
                    text: '',
                },
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'shadow'
                    }
                },
                legend: {
                    data: Object.keys(data)
                },
                xAxis: {
                    type: 'category',
                    data: Object.keys(data[Object.keys(data)[0]]),
                    axisLabel: {
                        rotate: 30,
                        interval: 0
                    }
                },
                yAxis: {
                    type: 'value'
                },
                series: series
            };
            return option;
        }
    }
</script>
</body>
</html>